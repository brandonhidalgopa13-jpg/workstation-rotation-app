plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlinx-serialization'
    id 'jacoco'
}

// Apply Google Services plugin only if google-services.json exists
if (file('google-services.json').exists()) {
    apply plugin: 'com.google.gms.google-services'
}

android {
    namespace 'com.workstation.rotation'
    compileSdk 34

    defaultConfig {
        applicationId "com.workstation.rotation"
        minSdk 24
        targetSdk 34
        versionCode 3
        versionName "2.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // Signing configurations
    signingConfigs {
        release {
            // Load keystore properties
            def keystorePropertiesFile = rootProject.file("keystore.properties")
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            } else {
                // Fallback for CI/CD or when keystore.properties doesn't exist
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            
            // Optimizations for release
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            zipAlignEnabled true
            
            // Version name suffix for release tracking
            versionNameSuffix ""
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
    }
    
    buildFeatures {
        viewBinding true
    }
    
    // Lint configuration
    lint {
        abortOnError false
        checkReleaseBuilds true
        ignoreWarnings false
        warningsAsErrors false
        
        // Disable specific checks if needed
        disable 'InvalidPackage', 'OldTargetApi'
        
        // Enable specific checks
        enable 'LogConditional', 'LogTagMismatch'
        
        // Output configuration
        htmlReport true
        xmlReport true
        textReport true
        
        htmlOutput file("$project.buildDir/reports/lint/lint-results.html")
        xmlOutput file("$project.buildDir/reports/lint/lint-results.xml")
        textOutput file("$project.buildDir/reports/lint/lint-results.txt")
    }
    
    // Test options
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        
        // Test coverage
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'
    
    // Room database
    implementation 'androidx.room:room-runtime:2.6.0'
    implementation 'androidx.room:room-ktx:2.6.0'
    kapt 'androidx.room:room-compiler:2.6.0'
    
    // RecyclerView
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    
    // JSON Serialization for backup/sync
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0'
    
    // Work Manager for background sync
    implementation 'androidx.work:work-runtime-ktx:2.8.1'
    
    // Firebase BOM - manages all Firebase library versions (optional)
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    
    // Firebase services (optional - only if google-services.json exists)
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    
    // Google Play Services Auth for sign-in (optional)
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
    
    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.1.0'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'androidx.room:room-testing:2.6.0'
    
    // Android Testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.work:work-testing:2.8.1'
    
    // UI Testing
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    
    // Fragment testing
    debugImplementation 'androidx.fragment:fragment-testing:1.6.2'
}

// Jacoco configuration for code coverage
jacoco {
    toolVersion = "0.8.8"
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*'
    ]
    
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"
    
    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}

// Task to run all tests and generate coverage report
tasks.register('fullTestSuite') {
    dependsOn 'testDebugUnitTest'
    dependsOn 'connectedDebugAndroidTest'
    dependsOn 'jacocoTestReport'
    
    tasks.findByName('jacocoTestReport').mustRunAfter('testDebugUnitTest')
    tasks.findByName('connectedDebugAndroidTest').mustRunAfter('testDebugUnitTest')
}

// Quality gates
tasks.register('qualityCheck') {
    dependsOn 'lint'
    dependsOn 'testDebugUnitTest'
    dependsOn 'jacocoTestReport'
    
    doLast {
        println "âœ… Quality check completed!"
        println "ðŸ“Š Check reports in:"
        println "   - Lint: build/reports/lint/"
        println "   - Tests: build/reports/tests/"
        println "   - Coverage: build/reports/jacoco/"
    }
}